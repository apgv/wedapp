/*
 * This file is generated by jOOQ.
*/
package codes.foobar.wedapp.jooq.tables;


import codes.foobar.wedapp.jooq.DefaultSchema;
import codes.foobar.wedapp.jooq.Indexes;
import codes.foobar.wedapp.jooq.Keys;
import codes.foobar.wedapp.jooq.tables.records.GuestRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Guest extends TableImpl<GuestRecord> {

    private static final long serialVersionUID = 527370470;

    /**
     * The reference instance of <code>guest</code>
     */
    public static final Guest GUEST = new Guest();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GuestRecord> getRecordType() {
        return GuestRecord.class;
    }

    /**
     * The column <code>guest.id</code>.
     */
    public final TableField<GuestRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('guest_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>guest.full_name</code>.
     */
    public final TableField<GuestRecord, String> FULL_NAME = createField("full_name", org.jooq.impl.SQLDataType.VARCHAR(54).nullable(false), this, "");

    /**
     * The column <code>guest.attending</code>.
     */
    public final TableField<GuestRecord, Boolean> ATTENDING = createField("attending", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>guest.note</code>.
     */
    public final TableField<GuestRecord, String> NOTE = createField("note", org.jooq.impl.SQLDataType.VARCHAR(445), this, "");

    /**
     * The column <code>guest.created_date</code>.
     */
    public final TableField<GuestRecord, OffsetDateTime> CREATED_DATE = createField("created_date", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "");

    /**
     * Create a <code>guest</code> table reference
     */
    public Guest() {
        this(DSL.name("guest"), null);
    }

    /**
     * Create an aliased <code>guest</code> table reference
     */
    public Guest(String alias) {
        this(DSL.name(alias), GUEST);
    }

    /**
     * Create an aliased <code>guest</code> table reference
     */
    public Guest(Name alias) {
        this(alias, GUEST);
    }

    private Guest(Name alias, Table<GuestRecord> aliased) {
        this(alias, aliased, null);
    }

    private Guest(Name alias, Table<GuestRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.GUEST_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<GuestRecord, Integer> getIdentity() {
        return Keys.IDENTITY_GUEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<GuestRecord> getPrimaryKey() {
        return Keys.GUEST_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<GuestRecord>> getKeys() {
        return Arrays.<UniqueKey<GuestRecord>>asList(Keys.GUEST_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Guest as(String alias) {
        return new Guest(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Guest as(Name alias) {
        return new Guest(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Guest rename(String name) {
        return new Guest(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Guest rename(Name name) {
        return new Guest(name, null);
    }
}
